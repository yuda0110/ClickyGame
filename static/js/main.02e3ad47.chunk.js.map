{"version":3,"sources":["logo.svg","components/Nav/index.js","components/Header/index.js","components/Wrapper/index.js","components/ImageCard/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","messageClasses","correct","message","score","topScore","className","Header","props","Wrapper","children","ImageCard","click","image","name","onClick","src","process","alt","App","state","animals","clickedIds","shuffleArr","array","i","length","j","Math","floor","random","clickImageHandler","id","includes","setState","setTimeout","console","log","this","map","animal","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById"],"mappings":"wvBAAAA,EAAOC,QAAU,IAA0B,kC,uNCiC5BC,G,kBA9BH,SAAC,GAA2C,IAClDC,EADSC,EAAwC,EAAxCA,QAASC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAUtC,OAPEJ,GADc,IAAZC,EACe,qBACI,IAAZA,EACQ,kBAEA,UAIjB,6BACE,yBAAKI,UAAU,iBACb,yBAAKA,UAAU,aAAf,eACA,uBAAGA,UAAWL,GAAiBE,GAC/B,yBAAKG,UAAU,mBACb,wBAAIA,UAAU,SACZ,qCACA,4BAAKF,IAEP,wBAAIE,UAAU,SACZ,yCACA,4BAAKD,SCbFE,G,MATA,SAAAC,GACb,OACE,gCACE,4CACA,0GCISC,G,MARC,SAAAD,GACd,OAAO,yBACHF,UAAYE,EAAMN,QAA4B,UAAlB,iBAE3BM,EAAME,YCUEC,G,MAdG,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACjC,OACE,yBACER,UAAU,OACVS,QAASH,GAET,yBACEI,IAAG,UAAKC,cAAL,0BAA6CJ,GAChDK,IAAKJ,O,OC8EEK,E,4MA9EbC,MAAQ,CACNC,QAASA,EACTjB,MAAO,EACPC,SAAU,EACViB,WAAY,GACZpB,QAAS,UACTC,QAAS,4B,EAGXoB,WAAa,YACX,IAD4B,IAAZC,EAAW,wBAClBC,EAAID,EAAME,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAC1C,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADA,EAEnB,CAACD,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFmC,KAE/BD,EAAMG,GAFyB,KAI5C,OAAOH,G,EAGTO,kBAAoB,SAAAC,GAClB,OAAO,WACD,EAAKZ,MAAME,WAAWW,SAASD,IACjC,EAAKE,SAAS,CACZ9B,MAAO,EACPkB,WAAY,GACZpB,SAAS,EACTC,QAAS,6BAEXgC,YAAW,WACT,EAAKD,SAAS,CACZhC,QAAS,cAEV,QAEH,EAAKgC,SAAS,CACZ9B,MAAO,EAAKgB,MAAMhB,MAAQ,EAC1BC,SAAU,EAAKe,MAAMf,UAAY,EAAKe,MAAMhB,MAAQ,EAAKgB,MAAMhB,MAAQ,EAAI,EAAKgB,MAAMf,SACtFiB,WAAW,GAAD,mBAAM,EAAKF,MAAME,YAAjB,CAA6BU,IACvC9B,SAAS,EACTC,QAAS,2BAEXgC,YAAW,WACT,EAAKD,SAAS,CACZhC,QAAS,cAEV,OAELkC,QAAQC,IAAI,EAAKjB,MAAME,YACvB,EAAKY,SAAS,CACZb,QAAS,EAAKE,WAAW,EAAKH,MAAMC,a,uDAKhC,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,CACEjB,MAAOkC,KAAKlB,MAAMhB,MAClBC,SAAUiC,KAAKlB,MAAMf,SACrBH,QAASoC,KAAKlB,MAAMlB,QACpBC,QAASmC,KAAKlB,MAAMjB,UAEtB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASD,QAASoC,KAAKlB,MAAMlB,SAC1BoC,KAAKlB,MAAMC,QAAQkB,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACER,GAAIQ,EAAOR,GACXS,IAAKD,EAAOR,GACZlB,KAAM0B,EAAO1B,KACbD,MAAO2B,EAAO3B,MACdD,MAAO,EAAKmB,kBAAkBS,EAAOR,e,GAtEjCU,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.02e3ad47.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport './style.css'\n\nconst Nav = ({ correct, message, score, topScore }) => {\n  let messageClasses\n  if (correct === false) {\n    messageClasses = 'message incorrect'\n  } else if (correct === true) {\n    messageClasses = 'message correct'\n  } else {\n    messageClasses = 'message'\n  }\n\n  return (\n    <nav>\n      <div className=\"nav-container\">\n        <div className=\"site-name\">Clicky Game</div>\n        <p className={messageClasses}>{message}</p>\n        <div className=\"score-container\">\n          <dl className=\"score\">\n            <dt>Score</dt>\n            <dd>{score}</dd>\n          </dl>\n          <dl className=\"score\">\n            <dt>Top Score</dt>\n            <dd>{topScore}</dd>\n          </dl>\n        </div>\n      </div>\n    </nav>\n  )\n}\n\nexport default Nav","import React from 'react'\nimport './style.css'\n\nconst Header = props => {\n  return (\n    <header>\n      <h1>Clicky Game!</h1>\n      <p>Click on an image to earn points, but don't click on any more than once!</p>\n    </header>\n  )\n}\n\nexport default Header","import React from 'react'\nimport './style.css'\n\nconst Wrapper = props => {\n  return <div\n      className={!props.correct ? 'wrapper shake' : 'wrapper'}\n    >\n      {props.children}\n    </div>\n}\n\nexport default Wrapper","import React from 'react'\nimport './style.css'\n\nconst ImageCard = ({ click, image, name }) => {\n  return (\n    <div\n      className='card'\n      onClick={click}\n    >\n      <img\n        src={`${process.env.PUBLIC_URL}/assets/images/${image}`}\n        alt={name}\n      />\n    </div>\n  )\n}\n\nexport default ImageCard","import React, {Component} from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport Nav from './components/Nav'\nimport Header from './components/Header'\nimport Wrapper from './components/Wrapper'\nimport ImageCard from './components/ImageCard'\nimport animals from './animals.json'\n\n\nclass App extends Component {\n  state = {\n    animals: animals,\n    score: 0,\n    topScore: 0,\n    clickedIds: [],\n    correct: 'default',\n    message: 'Click an image to begin!'\n  }\n\n  shuffleArr = ([...array]) => {\n    for (let i = array.length - 1; i >= 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]]\n    }\n    return array\n  }\n\n  clickImageHandler = id => {\n    return () => {\n      if (this.state.clickedIds.includes(id)) {\n        this.setState({\n          score: 0,\n          clickedIds: [],\n          correct: false,\n          message: 'You guessed incorrectly!'\n        })\n        setTimeout(() => {\n          this.setState({\n            correct: 'default'\n          })\n        }, 1200)\n      } else {\n        this.setState({\n          score: this.state.score + 1,\n          topScore: this.state.topScore <= this.state.score ? this.state.score + 1 : this.state.topScore,\n          clickedIds: [...this.state.clickedIds, id],\n          correct: true,\n          message: 'You guessed correctly!'\n        })\n        setTimeout(() => {\n          this.setState({\n            correct: 'default'\n          })\n        }, 1200)\n      }\n      console.log(this.state.clickedIds)\n      this.setState({\n        animals: this.shuffleArr(this.state.animals)\n      })\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Nav\n          score={this.state.score}\n          topScore={this.state.topScore}\n          correct={this.state.correct}\n          message={this.state.message}\n        />\n        <Header />\n        <Wrapper correct={this.state.correct}>\n          {this.state.animals.map(animal => (\n            <ImageCard\n              id={animal.id}\n              key={animal.id}\n              name={animal.name}\n              image={animal.image}\n              click={this.clickImageHandler(animal.id)}\n            />\n          ))}\n        </Wrapper>\n      </>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}